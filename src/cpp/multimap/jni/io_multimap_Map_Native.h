/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class io_multimap_Map_Native */

#ifndef _Included_io_multimap_Map_Native
#define _Included_io_multimap_Map_Native
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     io_multimap_Map_Native
 * Method:    open
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_io_multimap_Map_00024Native_open
  (JNIEnv *, jclass, jstring, jstring);

/*
 * Class:     io_multimap_Map_Native
 * Method:    close
 * Signature: (Ljava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_close
  (JNIEnv *, jclass, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    put
 * Signature: (Ljava/nio/ByteBuffer;[B[B)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_put
  (JNIEnv *, jclass, jobject, jbyteArray, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    get
 * Signature: (Ljava/nio/ByteBuffer;[B)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_io_multimap_Map_00024Native_get
  (JNIEnv *, jclass, jobject, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    getMutable
 * Signature: (Ljava/nio/ByteBuffer;[B)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_io_multimap_Map_00024Native_getMutable
  (JNIEnv *, jclass, jobject, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    contains
 * Signature: (Ljava/nio/ByteBuffer;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_io_multimap_Map_00024Native_contains
  (JNIEnv *, jclass, jobject, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    delete
 * Signature: (Ljava/nio/ByteBuffer;[B)J
 */
JNIEXPORT jlong JNICALL Java_io_multimap_Map_00024Native_delete
  (JNIEnv *, jclass, jobject, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    deleteAll
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Predicate;)J
 */
JNIEXPORT jlong JNICALL Java_io_multimap_Map_00024Native_deleteAll
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    deleteAllEqual
 * Signature: (Ljava/nio/ByteBuffer;[B[B)J
 */
JNIEXPORT jlong JNICALL Java_io_multimap_Map_00024Native_deleteAllEqual
  (JNIEnv *, jclass, jobject, jbyteArray, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    deleteFirst
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Predicate;)Z
 */
JNIEXPORT jboolean JNICALL Java_io_multimap_Map_00024Native_deleteFirst
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    deleteFirstEqual
 * Signature: (Ljava/nio/ByteBuffer;[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_io_multimap_Map_00024Native_deleteFirstEqual
  (JNIEnv *, jclass, jobject, jbyteArray, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    replaceAll
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Function;)J
 */
JNIEXPORT jlong JNICALL Java_io_multimap_Map_00024Native_replaceAll
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    replaceAllEqual
 * Signature: (Ljava/nio/ByteBuffer;[B[B[B)J
 */
JNIEXPORT jlong JNICALL Java_io_multimap_Map_00024Native_replaceAllEqual
  (JNIEnv *, jclass, jobject, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    replaceFirst
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Function;)Z
 */
JNIEXPORT jboolean JNICALL Java_io_multimap_Map_00024Native_replaceFirst
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    replaceFirstEqual
 * Signature: (Ljava/nio/ByteBuffer;[B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_io_multimap_Map_00024Native_replaceFirstEqual
  (JNIEnv *, jclass, jobject, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     io_multimap_Map_Native
 * Method:    forEachKey
 * Signature: (Ljava/nio/ByteBuffer;Lio/multimap/Callables/Procedure;)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_forEachKey
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    forEachValue
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Procedure;)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_forEachValue__Ljava_nio_ByteBuffer_2_3BLio_multimap_Callables_00024Procedure_2
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    forEachValue
 * Signature: (Ljava/nio/ByteBuffer;[BLio/multimap/Callables/Predicate;)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_forEachValue__Ljava_nio_ByteBuffer_2_3BLio_multimap_Callables_00024Predicate_2
  (JNIEnv *, jclass, jobject, jbyteArray, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    getProperties
 * Signature: (Ljava/nio/ByteBuffer;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_io_multimap_Map_00024Native_getProperties
  (JNIEnv *, jclass, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    maxKeySize
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_io_multimap_Map_00024Native_maxKeySize
  (JNIEnv *, jclass, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    maxValueSize
 * Signature: (Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_io_multimap_Map_00024Native_maxValueSize
  (JNIEnv *, jclass, jobject);

/*
 * Class:     io_multimap_Map_Native
 * Method:    Optimize
 * Signature: (Ljava/lang/String;Ljava/lang/String;Lio/multimap/Callables/LessThan;I)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_Optimize
  (JNIEnv *, jclass, jstring, jstring, jobject, jint);

/*
 * Class:     io_multimap_Map_Native
 * Method:    Import
 * Signature: (Ljava/lang/String;Ljava/lang/String;ZI)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_Import
  (JNIEnv *, jclass, jstring, jstring, jboolean, jint);

/*
 * Class:     io_multimap_Map_Native
 * Method:    Export
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_io_multimap_Map_00024Native_Export
  (JNIEnv *, jclass, jstring, jstring);

#ifdef __cplusplus
}
#endif
#endif
